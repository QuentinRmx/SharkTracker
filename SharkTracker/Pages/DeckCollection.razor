@page "/decks"
@using SharkTracker.Data.Models;
@using SharkTracker.Data;

<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />

<h1>Deck Collection</h1>

<input placeholder="New Deck Name..." value="@NewDeckName" @oninput="(e)=> NewDeckName = e.Value.ToString()" />
<input placeholder="New Deck Code..." value="@NewDeckCode" @oninput="(e)=> NewDeckCode = e.Value.ToString()" />
<button class="btn btn-primary @((string.IsNullOrWhiteSpace(NewDeckName) || (string.IsNullOrWhiteSpace(NewDeckCode))) ? "disabled" : "")" @onclick="@(async () => await NewDeck() )">+</button>

<div>
    <table class="table table-striped table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Code</th>
                <th>Played</th>
                <th>Winrate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var deck in _decks)
            {
                <tr>
                    <td class="col-1"><b>@deck.DeckName</b></td>
                    <td class="col-2"><div class="text-break small">@deck.DeckCode</div></td>
                    <td class="col-1">@((_matchups.Any(mu => mu.PlayerDeckId == deck.Id) ? _matchups.Where(mu => mu.PlayerDeckId == deck.Id).Sum(mu => mu.TotalEncounters) : ""))</td>
                    <td class="col-1">@((_matchups.Any(mu => mu.PlayerDeckId == deck.Id) ? string.Format("{0:0.##} %", _matchups.Where(mu => mu.PlayerDeckId == deck.Id).Average(mu => mu.Winrate)) : ""))</td>
                    <td class="col-3">
                        <a class="btn btn-outline-info" href="deckDetail/{@deck.DeckId}"><span class="oi oi-magnifying-glass"></span></a>
                        <button class="btn btn-outline-danger" @onclick="@(async () => await DeleteDeck(deck) )"><span class="oi oi-trash"></span></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
    #nullable enable

    //list of decks.
    private IList<Deck> _decks = new List<Deck>();

    private IList<Matchup> _matchups = new List<Matchup>();

    public string? NewDeckName;

    public string? NewDeckCode;

    protected override async Task OnInitializedAsync()
    {
        if (App.DeckRepo is null || App.MatchupRepo is null) return;

        _decks = await App.DeckRepo.GetAll();
        _decks = _decks.OrderByDescending(d => d.Version).GroupBy(d => d.DeckId).Select(d => d.First()).ToList();

    _matchups = await App.MatchupRepo.GetAll();

    }

    private async Task NewDeck()
    {
        if (App.DeckRepo is null) return;

        var deck = new Deck()
            {
                DeckName = NewDeckName,
                DeckCode = NewDeckCode,
                Version = 1,
                DeckId = (_decks.Any()) ? _decks.Max(d => d.Id) + 1 : 1
            };

        var result = await App.DeckRepo.Add(deck);
        _decks.Add(deck);
        NewDeckName = string.Empty;
        NewDeckCode = string.Empty;
    }

    private async Task DeleteDeck(Deck deck)
    {
        if (App.DeckRepo is null) return;

        var result = await App.DeckRepo.Delete(deck);
        if (result == ERepositoryResponse.Success) _decks.Remove(deck);
    }
}

<style>

    @@import url('https://fonts.googleapis.com/css2?family=Work+Sans');

    body {
        font-family: 'Work Sans';
    }
</style>
