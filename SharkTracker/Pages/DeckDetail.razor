@page "/deckDetail/{DeckId}"
@using SharkTracker.Data
@using SharkTracker.Data.LoRDeckCodes
@using SharkTracker.Data.Models


<a href="/decks" class="btn btn-outline-dark"><span class="oi oi-arrow-thick-left"></span> Back</a>

@if (Deck is null)
{
    <h1>Loading data ...</h1>
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
     
    <div class="container-fluid">
        <div class="row">
            <div class="col-8">
                <h1>@Deck.DeckName V@(Deck.Version)</h1>
                @if (Matchups is not null && Matchups.Any())
                {
                    <div class="chartDonut">
                        <ApexChart @ref="DonutRef" TItem="Matchup" Title="Match-ups" Options="_muOptions">
                            <ApexPointSeries TItem="Matchup"
                                     Items="Matchups"
                                     SeriesType="SeriesType.Donut"
                                     Name="Match-up"
                                     XValue="@(mu => mu.OpponentDeckName)"
                                     YValue="@(mu => mu.TotalEncounters)">
                            </ApexPointSeries>
                        </ApexChart>
                    </div>

                }

                <input placeholder="New Match-Up Name..." value="@NewMuName" @oninput="(e)=> NewMuName = e.Value.ToString()" />
                <button class="btn btn-primary @((string.IsNullOrWhiteSpace(NewMuName)) ? "disabled" : "")" @onclick="@(async () => await NewMu() )">+</button>
                <br />
                <input placeholder="New version deck code" value="@NewDeckCode" @oninput="(e)=> NewDeckCode = e.Value.ToString()" />
                <button class="btn btn-primary @((string.IsNullOrWhiteSpace(NewDeckCode)) ? "disabled" : "")" @onclick="@(async () => await NewDeckVersion() )"><span class="oi oi-reload"></span></button>
                <table class="table table-striped table-hover table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>Name</th>
                            <th>Win</th>
                            <th>Lose</th>
                            <th>Total</th>
                            <th>Winrate</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        @foreach (var mu in Matchups)
                        {
                            <tr>
                                <td>@mu.OpponentDeckName</td>
                                <td>
                                    <div>
                                        <button class="btn btn-outline-primary @((mu.Win == 0) ? "disabled" : "")" @onclick="@(async () => await UpdateWin(mu, -1) )"><span class="oi oi-minus"></span></button>
                                        @mu.Win
                                        <button class="btn btn-outline-primary" @onclick="@(async () => await UpdateWin(mu, 1) )"><span class="oi oi-plus"></span></button>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <button class="btn btn-outline-primary @((mu.Lose == 0) ? "disabled" : "") " @onclick="@(async () => await UpdateLose(mu, -1) )"><span class="oi oi-minus"></span></button>
                                        @mu.Lose
                                        <button class="btn btn-outline-primary" @onclick="@(async () => await UpdateLose(mu, 1) )"><span class="oi oi-plus"></span></button>
                                    </div>
                                </td>
                                <td><b>@mu.TotalEncounters</b></td>
                                <td><div class="@mu.EvaluateWinrate()"><b>@(string.Format("{0:0.##}", mu.Winrate)) %</b></div></td>
                                <td>
                                    <button class="btn btn-outline-danger" @onclick="@(async () => await DeleteMu(mu) )"><span class="oi oi-trash"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td><b>TOTAL</b></td>
                            <td><b>@Matchups.Sum(mu => mu.Win)</b></td>
                            <td><b>@Matchups.Sum(mu => mu.Lose)</b></td>
                            <td><b>@Matchups.Sum(mu => mu.TotalEncounters)</b></td>
                            <td><b>@((Matchups.Any()) ? string.Format("{0:0.##} %", Matchups.Average(mu => mu.Winrate)) : "0")</b></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <div class="col-2 border">
                <h3>Deck List</h3>
                @*@if ((AllDeckVersions.Count() > 1))
                {
                    <select class="form-select" value="@SelectedVersion" @onchange="@(async (args) => await SelectedVersionChanged(args.Value))">
                    @if (AllDeckVersions is not null && AllDeckVersions.Any()){
                        @foreach(Deck d in AllDeckVersions)
                    {
                        <option value="@d.Version">V@(d.Version)</option>
                    }
                    }
                </select>
                }*@
                <table class="table table-striped table-sm" style="vertical-align: middle;">
                    <tbody class="table-group-divider">
                        @foreach (Card c in DeckCards)
                        {
                            <tr>
                                <td class="col-1">
                                    <div class="manaCostContainer">
                                        <img src="img/managem.png" style="z-index : -1;" width="30" height="30" />
                                        <div class="manaCost"><b>@c.Cost</b></div>
                                    </div>
                                </td>
                                @*<td class="col-3"><CardTooltip ArtworkPath="@c.ArtworkPath">@c.Name</CardTooltip></td>*@
                                <td class="col-3">@c.Name</td>
                                <td class="col-2"><span style="color: gray;">x</span><b style="color:lightslategray;">@(Deck.Cards.First(cc => cc.CardCode == c.Code).Count)</b></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    #nullable enable

    [Parameter]
    public string? DeckId { get; set; }

    public Deck? Deck { get; set; }

    public List<Deck> AllDeckVersions { get; set; } = new();

    public List<Matchup> Matchups { get; set; } = new();

    public string? NewMuName { get; set; }

    private ApexChart<Matchup>? DonutRef;

    public List<Card> AllCards = new();

    public List<Card> DeckCards = new();

    public int SelectedVersion { get; set; }

    private ApexChartOptions<Matchup> _muOptions = new ApexChartOptions<Matchup>
        {
            Theme = new Theme
            {
                Mode = Mode.Light,
                Palette = PaletteType.Palette1
            }
        };

    public string? NewDeckCode { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            DeckId = (DeckId is not null) ? DeckId.Replace("{", "").Replace("}", "") : "";
            if (int.TryParse(DeckId, out int id))
            {

                if (App.DeckRepo is null) return;

                var alldecks = (await App.DeckRepo.GetAll());

                AllDeckVersions = alldecks.Where(d => d.DeckId == id).OrderByDescending(d => d.Version).ToList();
                Deck = AllDeckVersions.First();
                if (Deck is null) return;

                await UpdateUIForDeck();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task UpdateUIForDeck()
    {
        try
        {
            if (App.MatchupRepo is null) return;

            var allMu = await App.MatchupRepo.GetAll();
            Matchups = allMu.FindAll(mu => mu.PlayerDeckId == Deck.DeckId);

            List<CardCodeAndCount> cardsCount = LoRDeckEncoder.GetDeckFromCode(Deck.DeckCode);
            Deck.Cards = cardsCount;
            AllCards = await App.GetAllCards();
            DeckCards.Clear();
            foreach (CardCodeAndCount cc in Deck.Cards)
            {
                if (AllCards.Any(c => c.Code == cc.CardCode))
                    DeckCards.Add(AllCards.First(c => c.Code == cc.CardCode));
            }
            DeckCards = DeckCards.OrderBy(c => c.Cost).ThenBy(c => c.Name).ToList();

            SelectedVersion = Deck.Version;
            await RefreshGraphs();
        } catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task RefreshGraphs()
    {
        if (DonutRef is not null)
        {
            await DonutRef.UpdateSeriesAsync();
            await DonutRef.RenderAsync();
        }
    }

    private async Task NewMu()
    {
        if (App.MatchupRepo is null || Deck is null) return;

        Matchup mu = new Matchup
            {
                PlayerDeckId = Deck.DeckId,
                OpponentDeckName = NewMuName,
                PlayerDeckVersion = Deck.Version
            };
        var result = await App.MatchupRepo.Add(mu);
        Matchups.Add(mu);

        NewMuName = string.Empty;

        await RefreshGraphs();
    }

    private async Task UpdateWin(Matchup mu, int value)
    {
        if (App.MatchupRepo is null) return;

        mu.Win += value;
        if (mu.Win < 0) mu.Win = 0;

        await App.MatchupRepo.Update(mu);
        await RefreshGraphs();
    }

    private async Task UpdateLose(Matchup mu, int value)
    {
        if (App.MatchupRepo is null) return;

        mu.Lose += value;
        if (mu.Lose < 0) mu.Lose = 0;

        await App.MatchupRepo.Update(mu);
        await RefreshGraphs();
    }

    private async Task DeleteMu(Matchup mu)
    {
        if (App.MatchupRepo is null) return;

        var result = await App.MatchupRepo.Delete(mu);
        if (result == ERepositoryResponse.Success)
        {https://0.0.0.0/deckDetail/%7B1%7D
            Matchups.Remove(mu);
            await RefreshGraphs();
        }
    }

    private async Task NewDeckVersion()
    {
        if (App.DeckRepo is null) return;
        Deck newDeck = new Deck
            {
                DeckCode = NewDeckCode,
                DeckName = Deck.DeckName,
                Version = Deck.Version + 1,
                DeckId = Deck.DeckId
            };

        await App.DeckRepo.Add(newDeck);
        NewDeckCode = string.Empty;
        AllDeckVersions.Add(newDeck);

        Deck = newDeck;

        await UpdateUIForDeck();
    }

    public async Task SelectedVersionChanged(object version)
    {
        int v = Convert.ToInt32(version);
        Deck = AllDeckVersions.First(d => d.Version == v);
        await UpdateUIForDeck();
    }
}

<style>
    .chartDonut {
        max-width: 30%;
        max-height: 30%;
        padding: 10px;
    }



    @@import url('https://fonts.googleapis.com/css2?family=Work+Sans');

    body {
        font-family: 'Work Sans';
    }

    .manaCostContainer {
        position: relative;
        text-align: center;
        color: white;
    }

    .manaCost {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
</style>
